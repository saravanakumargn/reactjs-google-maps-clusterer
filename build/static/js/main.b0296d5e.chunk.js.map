{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","MapWithAMarkerClusterer","compose","withProps","googleMapURL","loadingElement","react_default","a","createElement","style","height","containerElement","mapElement","withHandlers","onMarkerClustererClick","markerClusterer","clickedMarkers","getMarkers","console","log","concat","length","withScriptjs","withGoogleMap","props","lib","defaultZoom","defaultCenter","lat","lng","MarkerClusterer_default","onClick","averageCenter","enableRetinaIcons","gridSize","markers","map","marker","key","id","position","parseFloat","latitude","longitude","App","state","numberCount","isLoading","onChange","_this","setState","jsonUrl","fetch","then","res","json","data","handleChange","name","event","Object","defineProperty","target","value","this","_this2","className","Select_default","inputProps","MenuItem_default","Button_default","variant","color","disabled","CircularProgress_default","size","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b0296d5e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport { compose, withProps, withHandlers } from 'recompose';\nimport MarkerClusterer from 'react-google-maps/lib/components/addons/MarkerClusterer';\nimport { randomPosition } from '@turf/random';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport uniqid from 'uniqid';\nimport {\n  withScriptjs,\n  withGoogleMap,\n  GoogleMap,\n  Marker,\n} from 'react-google-maps';\nimport logo from './logo.svg';\nimport './App.css';\n\nconst MapWithAMarkerClusterer = compose(\n  withProps({\n    googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyARtVW-A41AQRDz0Zm9WAva78ZgV5TAARQ&v=3.exp&libraries=geometry,drawing,places\",\n    loadingElement: <div style={{ height: `100%` }} />,\n    containerElement: <div style={{ height: `400px` }} />,\n    mapElement: <div style={{ height: `100%` }} />,\n  }),\n  withHandlers({\n    onMarkerClustererClick: () => (markerClusterer) => {\n      const clickedMarkers = markerClusterer.getMarkers()\n      console.log(`Current clicked markers length: ${clickedMarkers.length}`)\n      console.log(clickedMarkers)\n    },\n  }),\n  withScriptjs,\n  withGoogleMap\n)(props =>\n  <GoogleMap\n    defaultZoom={3}\n    defaultCenter={{ lat: 25.0391667, lng: 121.525 }}\n  >\n    <MarkerClusterer\n      onClick={props.onMarkerClustererClick}\n      averageCenter\n      enableRetinaIcons\n      gridSize={60}\n    >\n      {props.markers.map(marker => (\n        <Marker\n          key={marker.id}\n          position={{ lat: parseFloat(marker.latitude), lng: parseFloat(marker.longitude) }}\n        />\n      ))}\n    </MarkerClusterer>\n  </GoogleMap>\n);\n\nclass App extends Component {\n  componentWillMount() {\n    this.setState({ markers: [] })\n  }\n  state = {\n    numberCount: 100,\n    isLoading: false,\n  };\n\n  onChange = () => {\n    if (!this.state.isLoading) {\n      // console.log('onChangedd');\n      // let markerData = [];\n      this.setState(\n        {\n          isLoading: true,\n          markers: [],\n        },\n        () => {\n\n          let jsonUrl = '';\n          switch (this.state.numberCount) {\n            case 100:\n              jsonUrl = 'https://gist.githubusercontent.com/saravanakumargn/416de2c54af114c54f1cca8d161b5a39/raw/215034acca7f3d8be0ecd77ad6d2a2a2826e4545/data_100.json';\n              break;\n            case 500:\n              jsonUrl = 'https://gist.githubusercontent.com/saravanakumargn/a3a6f67f0fad2dbd310a67dad9edf163/raw/03f1e3561a734d7b55bbd7888c7749bbb02258a5/data_500.json';\n              break;\n            case 1000:\n              jsonUrl = 'https://gist.githubusercontent.com/saravanakumargn/f0aa9985935504c70dfc4f11dea3a0e0/raw/8e495c6c1d0e9b7ecf9904b60d26a9e993c5e840/data_1000.json';\n              break;\n            case 2000:\n              jsonUrl = 'https://gist.githubusercontent.com/saravanakumargn/98e4657b58a400f653eb53b0cc3e905a/raw/8affea8c43e177f66aa179ba1329d477551ff2e4/data_2000.json';\n              break;\n            case 4000:\n              jsonUrl = 'https://gist.githubusercontent.com/saravanakumargn/1525eda6e8cc33c2ef6dc5dde9a20347/raw/20b2ccb75caffdebdcc9c2184263ecd599501b1d/data_4000.json';\n              break;\n            case 6000:\n              jsonUrl = 'https://gist.githubusercontent.com/saravanakumargn/1fa7121c3a8ca53d4117abde5e03595e/raw/8383068132b9a27e649e945bf40a62a5bcfc347c/data_6000.json';\n              break;\n            default:\n              jsonUrl = 'https://gist.githubusercontent.com/saravanakumargn/416de2c54af114c54f1cca8d161b5a39/raw/215034acca7f3d8be0ecd77ad6d2a2a2826e4545/data_100.json';\n              break;\n          }\n\n          fetch(jsonUrl)\n            .then(res => res.json())\n            .then(data => {\n              console.log(data);\n              this.setState({ markers: data, isLoading: false, });\n            });\n\n          // for(let i=0; i<=this.state.numberCount; i++) {\n          //   var position = randomPosition([-180, -90, 180, 90]);\n          //   // console.log(position);\n          //   markerData.push({\n          //     markerId: uniqid(),\n          //     longitude: position[0],\n          //     latitude: position[1]\n          //   });\n          // }\n          // this.setState({\n          //   markers: markerData,\n          //   isLoading: false,\n          // }); \n        });\n    }\n  }\n  handleChange = name => event => {\n    this.setState({\n      [name]: event.target.value,\n    });\n  };\n  handleChange = event => {\n    this.setState({ numberCount: event.target.value });\n  };\n  render() {\n    return (\n      <div>\n        <MapWithAMarkerClusterer markers={this.state.markers} />\n\n        <div className=\"controls\">\n          {/* <TextField\n          id=\"standard-name\"\n          label=\"Name\"\n          value={this.state.numberCount}\n          onChange={this.handleChange('numberCount')}\n          className=\"textField\"\n          margin=\"normal\"\n        />\n        <br/> */}\n\n          {/* <InputLabel htmlFor=\"age-simple\">Age</InputLabel> */}\n          <Select\n            value={this.state.numberCount}\n            onChange={this.handleChange}\n            inputProps={{\n              name: 'age',\n              id: 'age-simple',\n            }}\n          >\n            <MenuItem value={100}>100</MenuItem>\n            <MenuItem value={500}>500</MenuItem>\n            <MenuItem value={1000}>1000</MenuItem>\n            <MenuItem value={2000}>2000</MenuItem>\n            <MenuItem value={4000}>4000</MenuItem>\n            <MenuItem value={6000}>6000</MenuItem>\n          </Select>\n\n          <div className=\"wrapper\">\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              disabled={this.state.isLoading}\n              onClick={() => this.onChange()}\n            >\n              Generate\n          </Button>\n            {this.state.isLoading && <CircularProgress size={24} className=\"buttonProgress\" />}\n          </div>\n\n        </div>\n      </div>\n\n    )\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}